cat("Hello from decorator\n")
f(...)
}
return(wrapper)
}
`_@_`decorator
`@` <- function()
{
# tmp <- tempfile()
#
# ## tinsel::source_decoratees(temp_file)
# ## snail instead of #.
# cat(here::here())
#decorate(rstudioapi::getActiveDocumentContext()$path)
tinsel::source_decoratees(rstudioapi::getActiveDocumentContext()$path)
}
`_@_` <- make_command(`@`)
`#.` <- function()
{
# tmp <- tempfile()
#
# ## tinsel::source_decoratees(temp_file)
# ## snail instead of #.
# cat(here::here())
#decorate(rstudioapi::getActiveDocumentContext()$path)
tinsel::source_decoratees(rstudioapi::getActiveDocumentContext()$path)
}
`@` <- function()
{
# tmp <- tempfile()
#
# ## tinsel::source_decoratees(temp_file)
# ## snail instead of #.
# cat(here::here())
#decorate(rstudioapi::getActiveDocumentContext()$path)
tinsel::source_decoratees(rstudioapi::getActiveDocumentContext()$path)
}
`#.` <- make_command(`@`)
decorator <- function(f)
{
force(f)
wrapper <- function(...)
{
cat("Hello from decorator\n")
f(...)
}
return(wrapper)
}
#. decorator
crazy_func <- function()
{
cat("crazy\n")
}
crazy_func()
`#.` decorator
`@` <- function()
{
# tmp <- tempfile()
#
# ## tinsel::source_decoratees(temp_file)
# ## snail instead of #.
# cat(here::here())
decorate(rstudioapi::getActiveDocumentContext()$path)
}
`_@_` <- make_command(`@`)
decorator
`_@_`
decorator
?file_iter
tinsel:::file_itr
decorate <- function(file)
{
if (!file.exists(file)) {
stop("file \"", file, "\" does not exist", call. = FALSE)
}
src <- new.env()
tryCatch(source(file = file, local = src, keep.source = FALSE),
error = function(e) {
stop("problem sourcing ", file, ", ", e$message,
call. = FALSE)
})
fileitr <- file_itr(file)
decor <- NULL
while (fileitr$has_next()) {
line <- fileitr$get_line()
if (grepl("^\\s*_@_", line)) {
d <- gsub("_@_|\\s", "", line)
if (char_at(d, -1) != ")") {
d <- paste0(d, "()")
}
decor <- c(decor, d)
}
else if (grepl("^(?!\\s*_@)_*<-", line, perl = TRUE) &&
!is.null(decor)) {
f <- gsub("^\\s*|\\s*<-.*$", "", line)
if (!is.function(get0(f, src))) {
next
}
decor <- rev(decor)
as_text <- f
for (d in decor) {
split_at <- first_of(d, "(")
dname <- substr(d, 1, split_at - 1)
dargs <- substr(d, split_at + 1, nchar(d))
if (!grepl("^\\s*\\)\\s*$", dargs)) {
dargs <- paste(",", dargs)
}
if (!exists(dname, envir = src)) {
stop("no definition found for decorator `",
dname, "`", call. = FALSE)
}
as_text <- c(dname, "(", as_text, dargs)
}
text_call <- paste(as_text, collapse = "", sep = "")
feval <- tryCatch(eval(parse(text = text_call),
envir = src), error = function(e) {
message("Problem evaluating `", f, "`: ", e$message)
NULL
})
if (!is.null(feval)) {
class(feval) <- c("decorated", class(feval))
attr(feval, "decoratee") <- get0(f, src)
dnames <- vapply(decor, re_search, character(1),
"^\\s*[^(]+")
attr(feval, "decorators") <- set_names(lapply(dnames,
get0, src), dnames)
assign(f, feval, parent.frame())
}
decor <- NULL
}
else if (grepl("^\\s*$", line)) {
}
else {
decor <- NULL
}
}
}
print.command <- function (cmd) {
default.args <- attr(cmd, "default.args")
if (length(default.args) == 0L) default.args <- list()
res <- do.call(cmd, default.args, envir = parent.frame(2))
if (attr(cmd, "print_result")) print(res)
invisible(NULL)
}
make_command <- function(x, ..., print = TRUE)
{
class(x) <- c("command", class(x))
attr(x, "default.args") <- list(...)
attr(x, "print_result") <- print
x
}
`@` <- function()
{
# tmp <- tempfile()
#
# ## tinsel::source_decoratees(temp_file)
# ## snail instead of #.
# cat(here::here())
decorate(rstudioapi::getActiveDocumentContext()$path)
}
`_@_` <- make_command(`@`)
decorator <- function(f)
{
force(f)
wrapper <- function(...)
{
cat("Hello from decorator\n")
f(...)
}
return(wrapper)
}
`_@_`
?rev
decorate <- function(file)
{
if (!file.exists(file)) {
stop("file \"", file, "\" does not exist", call. = FALSE)
}
src <- new.env()
tryCatch(source(file = file, local = src, keep.source = FALSE),
error = function(e) {
stop("problem sourcing ", file, ", ", e$message,
call. = FALSE)
})
fileitr <- tinsel:::file_itr(file)
decor <- NULL
while (fileitr$has_next()) {
line <- fileitr$get_line()
if (grepl("^\\s*_@_", line)) {
d <- gsub("_@_|\\s", "", line)
if (char_at(d, -1) != ")") {
d <- paste0(d, "()")
}
decor <- c(decor, d)
}
else if (grepl("^(?!\\s*_@)_*<-", line, perl = TRUE) &&
!is.null(decor)) {
f <- gsub("^\\s*|\\s*<-.*$", "", line)
if (!is.function(get0(f, src))) {
next
}
decor <- rev(decor)
as_text <- f
for (d in decor) {
split_at <- first_of(d, "(")
dname <- substr(d, 1, split_at - 1)
dargs <- substr(d, split_at + 1, nchar(d))
if (!grepl("^\\s*\\)\\s*$", dargs)) {
dargs <- paste(",", dargs)
}
if (!exists(dname, envir = src)) {
stop("no definition found for decorator `",
dname, "`", call. = FALSE)
}
as_text <- c(dname, "(", as_text, dargs)
}
text_call <- paste(as_text, collapse = "", sep = "")
feval <- tryCatch(eval(parse(text = text_call),
envir = src), error = function(e) {
message("Problem evaluating `", f, "`: ", e$message)
NULL
})
if (!is.null(feval)) {
class(feval) <- c("decorated", class(feval))
attr(feval, "decoratee") <- get0(f, src)
dnames <- vapply(decor, re_search, character(1),
"^\\s*[^(]+")
attr(feval, "decorators") <- set_names(lapply(dnames,
get0, src), dnames)
assign(f, feval, parent.frame())
}
decor <- NULL
}
else if (grepl("^\\s*$", line)) {
}
else {
decor <- NULL
}
}
}
decorator <- function(f)
{
force(f)
wrapper <- function(...)
{
cat("Hello from decorator\n")
f(...)
}
return(wrapper)
}
`_@_`
`_@_`decorator
`_@_` decorator
`_@_`
decorator
crazy_func()
ls x
ls
ls x
ls(x)
print <- make_command(print)
print "hello"
print hello
print <- make_command(print, x)
print "hello"
print
print
x
## Functionals
## take other functions as argument
randomise <- function(f) f(runif(1e3))
hist(runif(1e6))
randomise(mean)
randomise(mean)
randomise(mean)
help(package = "rlang")
rlang::eval_tidy
## code is data
rlang::expr(mean(x, na.rm = TRUE))
## code is data
rlang::expr(mean(x, na.rm = TRUE)) -> test
class(test)
rlang::expr(x <- 1) -> test
class(test)
rlang::expr(1 + 1) -> test
class(test)
rlang::expr(x) -> test
class(test)
typeof(test)
rlang::expr(1 + 1) -> test
typeof(test)
rlang::enexpr
?rlang::enexpr
capture_it <- function(x)
{
rlang::enexpr(x)
}
capture_it(a + b + c)
capture_it <- function(x)
{
rlang::expr(x)
}
capture_it(a + b + c)
capture_it <- function(x)
{
rlang::enexpr(x)
}
capture_it(a + b + c)
## code is a tree
## almost any programming language -> abstract syntax tree (AST)
## R is unusual in that you can actually inspect and manipulate this tree
lobstr::ast(f(a, "b"))
?lobstr::ast
lobstr::ast
str(f(a, "b"))
str(expr(f(a, "b")))
str(rlang::expr(f(a, "b")))
rlang::expr(f(a, "b"))
## code is a tree
## almost any programming language -> abstract syntax tree (AST)
## R is unusual in that you can actually inspect and manipulate this tree
lobstr::ast(f(a, "b"))
lobstr::ast(1 + 2 * 3)
## code can generate code
## code to create new trees
rlang::call2("f", 1, 2, 3) ==
rlang::expr(f(1, 2, 3))
?rlang::call2
rlang::call2(x <- 1)
rlang::call2(f, 1, 2, 3)
rlang::call2("<-", x, y)
rlang::call2("<-", "x", "y")
y <- 10
rlang::call2("<-", "x", "y") %>% eval()
eval(rlang::call2("<-", "x", "y"))
x
eval(rlang::call2("<-", "x", y))
x
?`!!`
## run code
## needs expression and environment, which tells R what the symbols in the
## expression mean
base::eval(expr(x + y), env(x = 1, y = 10))
library(rlang)
## run code
## needs expression and environment, which tells R what the symbols in the
## expression mean
base::eval(expr(x + y), env(x = 1, y = 10))
## !!x inserts the code tree in x into the expression, i.e. inserts expression into other expression
## building complex trees with help of simpler trees
xx <- expr(x + x)
yy <- expr(y + y)
expr(!!xx / !!yy)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`@` = function(x, y) paste0(x, y),
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " @ name)
?rlang::caller_env
string_math(("x" * 2 + "-y") * 3)
string_math(("x" * 2 @ "-y") * 3)
string_math(("x" * 2 @ "-y") * 3)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`@` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " @ name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
string_math(("x" * 2 @ "-y") * 3)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`"` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`.` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " . name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`(` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " ( name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`!` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
string_math("Hello " ! name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`@` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " @ name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math(("x" * 2 + "-y") * 3)
## customizing evaluation with data
df <- data.frame(x = 1:5, y = sample(5))
eval(expr(x + y), df) ## some pitfalls
rlang::eval_tidy(expr(x + y), df)
## wrap up in function
with2 <- function(df, expr) {
eval_tidy(enexpr(expr), df)
}
with2(df, x + y)
z <- rlang::expr(y <- x * 10)
z
## parsing and deparsing
x <- 10
x1 <- "y <- x + 10"
x1
x2 <- rlang::parse_expr(x1)
x2
eval(x2)
x1 <- "y <- 'x' + 10"
x1
x2 <- rlang::parse_expr(x1)
x2
eval(x2)
x2
## walking AST with recursive functions
expr_type <- function(x)
{
if (rlang::is_syntactic_literal(x))
{
"constant"
}
else if (is.symbol(x))
{
"symbol"
}
else if (is.call(x))
{
"call"
}
else if (is.pairlist(x))
{
"pairlist"
}
else
{
typeof(x)
}
}
expr_type(expr("a"))
expr_type(expr(x))
expr_type(expr(f(1, 2)))
?is_call
