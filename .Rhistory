`@` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " @ name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
string_math(("x" * 2 @ "-y") * 3)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`"` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`.` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " . name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`(` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " ( name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`!` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
string_math("Hello " ! name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`@` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math("Hello " @ name)  ## wow! -> could be used for likelihood(...) and inside likelihood call stuff like random_coef(...)
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
name <- "Daniel"
string_math(("x" * 2 + "-y") * 3)
## customizing evaluation with data
df <- data.frame(x = 1:5, y = sample(5))
eval(expr(x + y), df) ## some pitfalls
rlang::eval_tidy(expr(x + y), df)
## wrap up in function
with2 <- function(df, expr) {
eval_tidy(enexpr(expr), df)
}
with2(df, x + y)
z <- rlang::expr(y <- x * 10)
z
## parsing and deparsing
x <- 10
x1 <- "y <- x + 10"
x1
x2 <- rlang::parse_expr(x1)
x2
eval(x2)
x1 <- "y <- 'x' + 10"
x1
x2 <- rlang::parse_expr(x1)
x2
eval(x2)
x2
## walking AST with recursive functions
expr_type <- function(x)
{
if (rlang::is_syntactic_literal(x))
{
"constant"
}
else if (is.symbol(x))
{
"symbol"
}
else if (is.call(x))
{
"call"
}
else if (is.pairlist(x))
{
"pairlist"
}
else
{
typeof(x)
}
}
expr_type(expr("a"))
expr_type(expr(x))
expr_type(expr(f(1, 2)))
?is_call
l <- list("hello", "world")
l
c(l)
as.vector(l)
as.vector(l, mode = "vector")
?as.vector
as.vector(l, mode = "character")
as.vector(l, mode = "character") -> test
purrr::map(elems, rlang::as_string) %>%
as.vector(mode = "numeric")
devtools::load_all()
devtools::load_all()
devtools::load_all()
packageVersion("pkgload")
install.packages("pkgload")
install.packages("pkgload")
install.packages("pkgload")
install.packages("pkgload")
packageVersion("pkgload")
devtools::load_all()
devtools::install_version("pkgload", version = "1.2.4")
devtools::load_all()
packageVersion("pkgload")
devtools::load_all()
decoratoR::foo()
## motivation
ccement <- function(...)
{
elems <- rlang::ensyms(...)
purrr::map(elems, rlang::as_string) %>%
as.vector(mode = "character")
}
ccement(hello,
world,
how,
is,
it)
ccement(hello,
world,
how,
is,
it,
going)
?cc
?rlang::as_string
?`!!`
x <- "hello"
rlang::is_expression(x)
x <- "hello"
rlang::is_symbol(x)
rlang::is_expression(x)
rlang::is_call(x)
rlang::is_expression(!!x)
y <- rlang::expr(hello, x)
y <- rlang::expr(paste("hello", x))
eval(y)
y <- rlang::expr(paste("hello", !!x))
## quoting
## capturing an expression without evaluating it
## there are 4 important quoting functions:
## expr() captures its argument exactly as provided (without whitespace and comments)
## however:
f1 <- function(x) expr(x)
f1(a + b + c)
## quoting
## capturing an expression without evaluating it
## there are 4 important quoting functions:
## expr() captures its argument exactly as provided (without whitespace and comments)
## however:
f1 <- function(x) rlang::expr(x)
f1(a + b + c)
## 3. enexprs() capture all arguments in ...
f <- function(...) rlang::enexprs(...)
## 3. enexprs() capture all arguments in ...
f <- function(...) rlang::enexprs(...)
## 3. enexprs() capture all arguments in ...
f <- function(...) rlang::enexprs(...)
f(x = 1, y = 2, z = x * y)
test <- f(x = 1, y = 2, z = x * y)
rlang::is_expression(test$z)
## 4. exprs() make a list of expressions
## useful interactively...
exprs(x = x ^ 2, y = y ^ 3, z ?? .)
## 4. exprs() make a list of expressions
## useful interactively...
rlang::exprs(x = x ^ 2, y = y ^ 3, z ?? .)
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
rlang::ensym(x + y)
rlang::esyms(x, y, z)
rlang::ensyms(x, y, z)
rm(list = ls())
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
rlang::ensym(x)
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
x <- y <- z <- 1
rlang::ensym(x)
rlang::ensym(x + y)  #> throws an error
rlang::ensyms(x, y, z)
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
x <- 1
rlang::ensym(x)
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
rlang::ensym(expr(x))
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
rlang::ensym(rlang::sym(x))
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
rlang::ensym(rlang::expr(x))
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
x <- rlang::expr(x)
rlang::ensym()
rlang::ensym(x)
rlang::ensym("x")
## capturing symbols
## if you want to allow the user to specify a variable name (symbol) and not
## an arbitrary expression (although symbols are expressions...)
x <- rlang::sym(x)
rlang::ensym(x)
?`~`
y ~ x + z
y ~ x + z -> test
test
?call
call(test, x = 1, z = 2)
call("test", x = 1, z = 2)
?eval
## further (but discussed later):
## bquote() -> form of quasiquotation
## ~ formula -> quoting function that also captures the environment
## @daniehei example
f <- function(formula, ...)
{
args <- rlang::enexprs(...)
e <- new.env()
eval(args, e)
eval(formula, e)
return(e)
}
test <- f(z ~ x + y, x = 1, y = 2)
test$z
ls(test)
ls(envir = test)
test$x
## substitution
## substitute captures unevaluated expressions but does also substitution
f <- function(x) substitute(x * 2)
f(a + b + c)
substitute(x * y * z, list(x = 10, y = quote(a + b)))
substitute(x * y * z, list(x = 10, y = substitute(a + b)))
substitute(x * y * z, list(x = 10, y = quote(a + b)))
?substitue
?substitute
expr
rlang::expr
rlang::enexpr
rlang::enexpr(x + y)
expr
?expr
library(expr)
library(rlang)
## selectively evaluate code inside expr()
expr(!!x)
## unquoting one argument
## !! unquotes a single argument in a function: it takes a single expression,
## evaluates it and inlines the result in the AST
x <- expr(-1)
expr(f(!!x, y))
f(!!x, y)
sum(!!x)
## also works with symbols and constants
a <- sym("y")
b <- 1
expr(f(!!a, !!b))
expr(f(!!a, !!b))
expr(f(!!a, !!b))
## unquoting a function
## only challenge expr(!!f(x, y)) unquotes the result of f(x, y) so you need an
## extra pair of parentheses
f <- expr(foo)
expr((!!f)(x, y))
## equivalent to
call2(f, expr(x), expr(y))
expr(foo(!!arg, !!arg))
#> Error in enexpr(expr) : object 'arg' not found
expr(foo(!!maybe_missing(arg)))
## unquoting missing arguments
arg <- rlang::missing_arg()
expr(foo(!!arg, !!arg))
#> Error in enexpr(expr) : object 'arg' not found
expr(foo(!!maybe_missing(arg)))
## unquoting special form
get_from_iris <- function(x)
{
y <- enexpr(x)
z <- expr(`$`(iris, !!x))
eval(z)
}
get_from_iris(Species)
## unquoting special form
get_from_iris <- function(x)
{
y <- enexpr(x)
z <- expr(`$`(iris, !!y))
eval(z)
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
`$`(iris, !!y)
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
`$`(iris, x)
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
z <- expr(!!y)
`$`(iris, y)
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
!!y
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
filter(iris, !!y == "virginica")
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
eval(expr(filter(iris, !!y == "virginica")))
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
z <<- expr(filter(iris, !!y == "virginica"))
eval(z)
}
get_from_iris(Species)
get_from_iris <- function(x)
{
y <- enexpr(x)
z <<- expr(dplyr::filter(iris, !!y == "virginica"))
eval(z)
}
get_from_iris(Species)
filter_iris <- function(var, filt)
{
var <- enexpr(var)
filt <- enexpr(filt)
z <<- expr(dplyr::filter(iris, !!y == filt))
eval(z)
}
filter_iris(Species, virginica)
filter_iris <- function(var, filt)
{
var <- enexpr(var)
filt <- enexpr(filt)
z <<- expr(dplyr::filter(iris, !!var == !!filt))
eval(z)
}
filter_iris(Species, virginica)
filter_iris <- function(var, filt)
{
var <- enexpr(var)
filt <- enexpr(filt)
filt <- rlang::as_string(filt)
z <<- expr(dplyr::filter(iris, !!var == filt))
eval(z)
}
filter_iris(Species, virginica)
## unquoting many args
## !!! takes a list of expressions and inserts them at the location of the !!!
ys <- set_names(xs, c("a", "b", "c"))
## unquoting many args
## !!! takes a list of expressions and inserts them at the location of the !!!
xs <- exprs(1, a, -b)
ys <- set_names(xs, c("a", "b", "c"))
expr(f(!!!ys, d = 4))
## @daniehei: read carefully ONLY inside expressions!
x <- "hello"
!!x
## @daniehei: read carefully ONLY inside expressions!
x <- "hello"
y <- quote(x)
!!y
## but
expr(!!y)
## but
expr(!!x)
## @daniehei: read carefully ONLY inside expressions!
y <- quote(variable)
!!y
## but
expr(!!y)
test <- expr(a + b)
test2 <- expr(test)
test2 <- expr(!!test)
test2 <- expr(test, expr("hello"))
test2 <- expr(test + expr("hello"))
eval(test2)
?env
paster <- function(...)
{
args <- rlang::enexprs(...)
e <- rlang::env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y)
)
}
paster("hello" + " " + "world")
new_string <- paster("hello" + " " + "world")
paster <- function(...)
{
args <- rlang::enexprs(...)
e <- rlang::env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y)
)
eval(args, e)
}
new_string <- paster("hello" + " " + "world")
new_string
## customising evaluation with functions
## override the behaviour of existing functions in an encapsulated way...
string_math <- function(x)
{
e <- env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y),  ## originally +
`*` = function(x, y) strrep(x, y)
)
eval(enexpr(x), e)
}
string_math("hello" + "world")
string_math("hello" + "world" + "how")
paster <- function(x)
{
arg <- rlang::enexpr(x)
e <- rlang::env(
rlang::caller_env(),
`+` = function(x, y) paste0(x, y)
)
eval(arg, e)
}
new_string <- paster("hello" + " " + "world")
new_string
paster("hello" + " " + world)
world <- "world"
paster("hello" + " " + world)
