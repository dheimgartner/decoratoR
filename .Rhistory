ys <- set_names(xs, c("a", "b", "c"))
expr(f(!!!ys, d = 4))
ys
## @daniehei if a function quotes an argument, that is, you can specify the arg as
## source without quoting. unquoting = selectively evaluate code!
f <- function(x)
{
expr(!!x + y)
}
f(3)
## @daniehei if a function quotes an argument, that is, you can specify the arg as
## source without quoting. unquoting = selectively evaluate code!
f <- function(x)
{
z <- enexpr(x)
expr(!!z + y)
}
f(3)
## @daniehei if a function quotes an argument, that is, you can specify the arg as
## source without quoting. unquoting = selectively evaluate code!
f <- function(x)
{
expr(!!z + y)
}
f(3)
dplyr::bind_rows(!!!dfs)
## ... (dot-dot-dot)
## read again 19 Quasiquotation Outline
dfs <- list(
a = data.frame(x = 1, y = 2),
b = data.frame(x = 3, y = 4)
)
dplyr::bind_rows(!!!dfs)
rbind(!!!dfs)
rbind(expr(!!!dfs))
expr(!!!dfs)
exprs(!!!dfs)
rbind(exprs(!!!dfs))
?rbind
rbind(exprs(!!!dfs), deparse.level = 1)
rbind(exprs(!!!dfs), deparse.level = 2)
rbind2 <- function(list_of_dfs)
{
ldfs <- enexprs(list_of_dfs)
rdf <- purrr::map_df(ldfs, rbind)
rdf
}
rbind2(!!!dfs)
ddfs
dfs
rbind2 <- function(...)
{
ldfs <- rlang::list2(...)
rdf <- purrr::map_df(ldfs, rbind)
rdf
}
rbind2(!!!dfs)
var <- "x"
val <- c(1, 2, 3)
tibble::tibble(!!var := val)
?`:=`
rbind3 <- function(...)
{
dots <- list(...)
rdf <- purrr::map_df(dots, rbind)
}
rbind3(dfs)
rbind3 <- function(...)
{
dots <- list(...)
rdf <- purrr::map_df(dots, rbind)
rdf
}
rbind3(dfs)
rbind2(dfs)
dplyr::bind_rows(dfs)
dplyr::bind_rows(!!!dfs)
dfs
enexprs(!!!dfs)
exprs(!!!dfs)
dfs
exprs(!!!dfs) == dfs
`:=`
?a
?abort
debugonce(`:=`)
var <- "x"
val <- c(1, 2, 3)
tibble::tibble(!!var := val)
library(rlang)
library
View(library)
set_attr <- function(.x, ...) {
attr <- rlang::list2(...)
attributes(.x) <- attr
.x
}
attrs <- list(x = 1, y = 2)
attr_name <- "z"
1:10 %>%
set_attr(w = 0, !!!attrs, !!attr_name := 3) %>%
str()
library(tidyverse)
set_attr <- function(.x, ...)
{
attr <- rlang::list2(...)
attributes(.x) <- attr
.x
}
attrs <- list(x = 1, y = 2)
attr_name <- "z"
1:10 %>%
set_attr(w = 0, !!!attrs, !!attr_name := 3) %>%
str()
1:10 %>%
set_attr(w = 0, attrs, !!attr_name := 3) %>%
str()
debugonce(set_attr)
1:10 %>%
set_attr(w = 0, attrs, !!attr_name := 3) %>%
str()
attr
debugonce(set_attr)
1:10 %>%
set_attr(w = 0, attrs, !!attr_name := 3) %>%
str()
attr()
attr
1:10 %>%
set_attr(w = 0, !!!attrs, !!attr_name := 3) %>%
str()
debugonce(set_attr)
1:10 %>%
set_attr(w = 0, !!!attrs, !!attr_name := 3) %>%
str()
attr
str(attr)
set_attr <- function(.x, ...)
{
attr <- list(...)
attributes(.x) <- attr
.x
}
attrs <- list(x = 1, y = 2)
attr_name <- "z"
1:10 %>% set_attr(attrs)
1:10 %>% set_attr(w = 10)
set_attr <- function(.x, ...)
{
attr <- rlang::list2(...)
attributes(.x) <- attr
.x
}
attrs <- list(x = 1, y = 2)
attr_name <- "z"
1:10 %>%
set_attr(w = 0, !!!attrs, !!attr_name := 3) %>%
str()
## compare with
set_attr <- function(.x, ...)
{
attr <- list(...)
attributes(.x) <- attr
.x
}
1:10 %>%
set_attr(w = 0, attrs)
1:10 %>%
set_attr(w = 0)
1:10 %>%
set_attr(w = 0) %>%   ## owrks
set_attr(attrs)
?`!!!`
?`...`
?rlang::`dyn-dots`
1:10 %>%
set_attr(w = 0) %>%   ## owrks
# set_attr(attrs)  ## Error... : attributes must be named!
set_attr(!!attr_name := 3)
1:10 %>%
set_attr(w = 0) %>%   ## owrks
# set_attr(attrs)  ## Error... : attributes must be named!
set_attr(!!attr_name = 3)
## use rlang::exec() if you want to use this technique with a function that does
## not have tidy dots
exec("mean", x= 10, na.rm = TRUE)
## use rlang::exec() if you want to use this technique with a function that does
## not have tidy dots
exec("mean", x = 1:10, na.rm = TRUE)
## ... (dot-dot-dot)
## read again 19 Quasiquotation Outline
dfs <- list(
a = data.frame(x = 1, y = 2),
b = data.frame(x = 3, y = 4)
)
## base R
## do.call
do.call("rbind", dfs)
f <- function(...) {
dots <- list(...)
if (length(dots) == 1 && is.list(dots[[1]])) {
dots <- dots[[1]]
}
dots
}
f(list(a = 1, b = 2))
f(a = 1, b = 2)
f <- function(...) {
dots <- list(...)
if (length(dots) == 1 && is.list(dots[[1]])) {
dots <- dots[[1]]
}
...
}
f(a = 1, b = 2)
f <- function(...) {
dots <- list(...)
if (length(dots) == 1 && is.list(dots[[1]])) {
dots <- dots[[1]]
}
...
}
f(list(a = 1, b = 2))
?interaction
a <- gl(2, 4, 8)
b <- gl(2, 2, 8, labels = c("ctrl", "treat"))
interaction(a, b)
?gl
a
View(interaction)
for (i in narg:1L) {
print(i)
}
narg <- 10
for (i in narg:1L) {
print(i)
}
RCurl::getURL
install.packages("RCurl")
View(library)
?RCurl::getURL
RCurl::getURL
getURI
RCurl::getURI
help(package = "RCurl")
txt = getURL("http://www.omegahat.net/RCurl/")
txt = RCurl::getURL("http://www.omegahat.net/RCurl/")
txt
debugonce(RCurl::getURL)
txt = RCurl::getURL("http://www.omegahat.net/RCurl/")
str(write)
class(write)
sloop::ftype(write)
sloop::otype(write)
write$update()
is.list(write)
myObject_methods <- list(
can_swim = function(self, can = TRUE)
{
cat(glue::glue("{self$name} can swim\n"))
}
)
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
myobject <- append(dots, myObject_methods)
class(myobject) <- "myObject"
}
)
mo <- myObject$new("blobb")
mo$can_swim()
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
myobject <- append(dots, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
mo$can_swim()
myObject_methods <- list(
can_swim = function(self, can = TRUE)
{
cat(glue::glue("{self$name} can swim\n"))
}
)
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
self <- list(self = dots)
myobject <- appen(self, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
myObject_methods <- list(
can_swim = function(self, can = TRUE)
{
cat(glue::glue("{self$name} can swim\n"))
}
)
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
self <- list(self = dots)
myobject <- append(self, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
mo
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
myobject <- append(dots, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
mo
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
myobject <- append(self = dots, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
myObject <- list(
new = function(name, ...)
{
dots <- list(self = list(name = name, ...))
myobject <- append(dots, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
mo
mo$self
myObject <- list(
new = function(name, ...)
{
dots <- list(name = name, ...)
myobject <- append(dots, myObject_methods)
class(myobject) <- "myObject"
return(myobject)
}
)
mo <- myObject$new("blobb")
mo
mo$name
"x <-  1"
"x <-  1" -> y
parse(y)
?parse
str2expression(y)
eval(str2expression(y))
rm(list = ls())
`<-` <- function(lhs, rhs)
`<-` <- function(lhs, rhs)
{
lhs <- expr(rhs)
return(lhs)
}
y <- hello
rm(list = ls())
## tidy evaluation: quasiquotation, quosures and data masks together
eval(expr(print(x + 1)), env(x = 1000))
library(rlang)
## tidy evaluation: quasiquotation, quosures and data masks together
eval(expr(print(x + 1)), env(x = 1000))
x
?eval
?seq_along
test <- list(1, 2, 3, 4)
seq_along(test)
test <- list(a = 1, b = 2, 3, 4)
seq_along(test)
for (i in seq_along(test))
for (i in seq_along(test))
{
print(i)
}
test
for (i in seq_along(test))
{
print(i)
}
for (i in test)
{
print(i)
}
test <- list(4, 5, 6, 7)
for (i in seq_along(test))
{
print(i)
}
?readLines
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out <- purrr::map_chr(exprs, ~rlang::as_string)
}
debugonce(strip_comments)
strip_comments(".R/advancedR.R")
debugonce(strip_comments)
strip_comments("R/advancedR.R")
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
file
exprs
rlang::as_string()
?rlang::as_string
?rlang::parse_exprs
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
exprs§§1
exprs[[1]]
as.string(exprs[[1]])
as.character(exprs[[1]])
rlang::string(exprs[[1]])
?writeLines
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out_list <- purrr::map_chr(exprs, ~rlang::expr_deparse)
out_list$sep <- "\n"
out_file <- do.call(paste, args = out_list)
file_name <- stringr::str_remove(path, "$.R")
file_name <- paste0(file_name, "_noc.R")
writeLines(out_file, con = file_name, sep = "")
invisible(out_file)
}
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out_list <- purrr::map(exprs, ~rlang::expr_deparse)
out_list$sep <- "\n"
out_file <- do.call(paste, args = out_list)
file_name <- stringr::str_remove(path, "$.R")
file_name <- paste0(file_name, "_noc.R")
writeLines(out_file, con = file_name, sep = "")
invisible(out_file)
}
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
out_list
out_list[[1]]
?rlang::expr_deparse
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out_list <- purrr::map(exprs, rlang::expr_deparse)
out_list$sep <- "\n"
out_file <- do.call(paste, args = out_list)
file_name <- stringr::str_remove(path, "$.R")
file_name <- paste0(file_name, "_noc.R")
writeLines(out_file, con = file_name, sep = "")
invisible(out_file)
}
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
out_list
out_file
stringr::str_remove(file_name, "^.R")
stringr::str_remove(file_name, ".R$")
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out_list <- purrr::map(exprs, rlang::expr_deparse)
out_list$sep <- "\n"
out_file <- do.call(paste, args = out_list)
file_name <- stringr::str_remove(path, ".R$")
file_name <- paste0(file_name, "_noc.R")
writeLines(out_file, con = file_name, sep = "")
invisible(out_file)
}
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
strip_comments <- function(path)
{
file <- paste(readLines(path, warn = FALSE), collapse = "\n")
exprs <- rlang::parse_exprs(file)
out_list <- purrr::map(exprs, rlang::expr_deparse)
out_list$sep <- "\n"
out_file <- do.call(paste, args = out_list)
file_name <- stringr::str_remove(path, ".R$")
file_name <- paste0(file_name, "_noc.R")
writeLines(out_file, con = file_name, sep = "\n")
invisible(out_file)
}
debugonce(strip_comments)
strip_comments("inst/scripts/advancedR.R")
